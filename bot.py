import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    CallbackContext,
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = ""  # –ù–ï –ó–ê–ë–£–î–¨ –í–°–¢–ê–í–ò–¢–ò –°–í–Ü–ô –¢–û–ö–ï–ù!

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –≥—Ä–∏
players = []
hands = {}
deck = []
discard_pile = []
current_turn = 0
flip_side = "light"  # "light" –∞–±–æ "dark"
game_started = False

# –ü–æ–≤–Ω–∏–π –Ω–∞–±—ñ—Ä –∫–∞—Ä—Ç UNO Flip (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)
# –ö–∞—Ä—Ç–∏ –º–∞—é—Ç—å —Ñ–æ—Ä–º–∞—Ç (color_light, value_light, color_dark, value_dark)
CARD_COLORS_LIGHT = ["red", "yellow", "green", "blue"]
CARD_COLORS_DARK = ["pink", "orange", "teal", "purple"]
VALUES_LIGHT = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "Skip", "Reverse", "+2"]
VALUES_DARK = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "Skip", "Reverse", "+5"]

SPECIAL_CARDS = [
    ("wild", "Flip"),  # Flip card - same for both sides
    ("wild", "Color"),  # Wild color change
]

def build_deck():
    deck = []
    # –î–æ–¥–∞—î–º–æ —Å–≤—ñ—Ç–ª—É —Å—Ç–æ—Ä–æ–Ω—É
    for color in CARD_COLORS_LIGHT:
        deck.append((color, "0", None, None))  # –ø–æ –æ–¥–Ω—ñ–π –∫–∞—Ä—Ç—ñ 0
        for val in VALUES_LIGHT[1:]:
            deck.append((color, val, None, None))
            deck.append((color, val, None, None))  # –ø–æ –¥–≤—ñ –∫–∞—Ä—Ç–∫–∏ –∫–æ–∂–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è

    # –î–æ–¥–∞—î–º–æ —Ç–µ–º–Ω—É —Å—Ç–æ—Ä–æ–Ω—É
    for color in CARD_COLORS_DARK:
        deck.append((None, None, color, "0"))
        for val in VALUES_DARK[1:]:
            deck.append((None, None, color, val))
            deck.append((None, None, color, val))

    # –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–∞—Ä—Ç–∏ (wild)
    for _ in range(4):
        deck.append(("wild", "Flip", "wild", "Flip"))
        deck.append(("wild", "Color", "wild", "Color"))

    random.shuffle(deck)
    return deck

def format_card(card, side):
    if side == "light":
        color, value, _, _ = card
    else:
        _, _, color, value = card

    if color is None:
        color = "wild"
    return f"{color} {value}"

def format_hand(hand, side):
    return "\n".join(f"{i+1}. {format_card(card, side)}" for i, card in enumerate(hand))

def start(update: Update, context: CallbackContext):
    global players, hands, deck, discard_pile, current_turn, flip_side, game_started
    players = []
    hands = {}
    deck = []
    discard_pile = []
    current_turn = 0
    flip_side = "light"
    game_started = False

    update.message.reply_text(
        "–í—ñ—Ç–∞—é! –¶–µ UNO Flip –±–æ—Ç.\n"
        "–©–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ –≥—Ä–∏, –Ω–∞–ø–∏—à–∏ /join\n"
        "–ú–∞–∫—Å–∏–º—É–º 4 –≥—Ä–∞–≤—Ü—ñ."
    )

def join(update: Update, context: CallbackContext):
    global players, game_started

    if game_started:
        update.message.reply_text("–ì—Ä–∞ –≤–∂–µ —Ç—Ä–∏–≤–∞—î. –ó–∞—á–µ–∫–∞–π –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É –≥—Ä—É.")
        return

    user = update.effective_user
    if user.id in [p.id for p in players]:
        update.message.reply_text("–í–∏ –≤–∂–µ –≤ –≥—Ä—ñ!")
        return

    if len(players) >= 4:
        update.message.reply_text("–ú–∞–∫—Å–∏–º—É–º 4 –≥—Ä–∞–≤—Ü—ñ, –º—ñ—Å—Ü—å –Ω–µ–º–∞—î.")
        return

    players.append(user)
    update.message.reply_text(f"{user.first_name} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –≥—Ä–∏! ({len(players)}/4)")

    if len(players) == 4:
        start_game(update, context)

def start_game(update: Update, context: CallbackContext):
    global deck, hands, discard_pile, current_turn, game_started

    game_started = True
    deck = build_deck()
    hands.clear()

    # –†–æ–∑–¥–∞—î–º–æ –ø–æ 7 –∫–∞—Ä—Ç –∫–æ–∂–Ω–æ–º—É
    for player in players:
        hands[player.id] = [deck.pop() for _ in range(7)]

    # –°–∫–∏–¥–∞—î–º–æ –≤–µ—Ä—Ö–Ω—é –∫–∞—Ä—Ç—É –≤ discard_pile (–ø–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ —Ü–µ –Ω–µ Flip)
    while True:
        top_card = deck.pop()
        if top_card[1] != "Flip" and top_card[3] != "Flip":
            discard_pile = [top_card]
            break
        else:
            deck.insert(0, top_card)

    current_turn = 0

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ–∂–Ω–æ–º—É —ó—Ö–Ω—ñ –∫–∞—Ä—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ
    for player in players:
        context.bot.send_message(
            chat_id=player.id,
            text=f"–ì—Ä–∞ –ø–æ—á–∞–ª–∞—Å—å! –¢–≤–æ—è —Ä—É–∫–∞:\n{format_hand(hands[player.id], flip_side)}",
        )

    update.message.reply_text(
        f"–ì—Ä–∞ –ø–æ—á–∞–ª–∞—Å—å! –ü–µ—Ä—à–∏–π —Ö–æ–¥–∏—Ç—å: {players[current_turn].first_name}\n"
        f"–ù–∞ —Å—Ç–æ–ª—ñ –∫–∞—Ä—Ç–∞: {format_card(discard_pile[-1], flip_side)}"
    )

    prompt_player_turn(context)

def prompt_player_turn(context: CallbackContext):
    global players, current_turn, hands, flip_side, discard_pile

    player = players[current_turn]
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ö–æ–¥—ñ–≤: —Å–∫–∏–Ω—É—Ç–∏ –∫–∞—Ä—Ç—É (1..N), –¥–æ–±—Ä–∞—Ç–∏ –∫–∞—Ä—Ç—É, —Å–∫–∞–∑–∞—Ç–∏ UNO
    hand = hands[player.id]
    buttons = [
        InlineKeyboardButton(
            text=f"–í–∏–∫–∏–Ω—É—Ç–∏ {i+1}: {format_card(card, flip_side)}", callback_data=f"play_{i}"
        )
        for i, card in enumerate(hand)
    ]

    # –†–æ–∑–±–∏–≤–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 2):
        keyboard.append(buttons[i : i + 2])

    keyboard.append(
        [InlineKeyboardButton("–î–æ–±—Ä–∞—Ç–∏ –∫–∞—Ä—Ç—É", callback_data="draw_card")]
    )
    keyboard.append(
        [InlineKeyboardButton("–°–∫–∞–∑–∞—Ç–∏ UNO", callback_data="say_uno")]
    )
    keyboard.append(
        [InlineKeyboardButton("–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∏ (Flip)", callback_data="flip_side")]
    )

    context.bot.send_message(
        chat_id=player.id,
        text=(
            f"–¢–≤—ñ–π —Ö—ñ–¥!\n"
            f"–ö–∞—Ä—Ç–∞ –Ω–∞ —Å—Ç–æ–ª—ñ: {format_card(discard_pile[-1], flip_side)}\n"
            f"–¢–≤–æ—è —Ä—É–∫–∞:\n{format_hand(hands[player.id], flip_side)}"
        ),
        reply_markup=InlineKeyboardMarkup(keyboard),
    )

def next_turn():
    global current_turn, players
    current_turn = (current_turn + 1) % len(players)

def valid_play(card, top_card, side):
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –º–æ–∂–Ω–∞ —Å–∫–∏–Ω—É—Ç–∏ –∫–∞—Ä—Ç—É –∑–≥—ñ–¥–Ω–æ –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ UNO Flip (—Å–ø—Ä–æ—â–µ–Ω–æ)
    # –î–æ–∑–≤–æ–ª—è—é—Ç—å—Å—è –∫–∞—Ä—Ç–∏ —Ç–æ–≥–æ –∂ –∫–æ–ª—å–æ—Ä—É –∞–±–æ —Ç–æ–≥–æ –∂ –∑–Ω–∞—á–µ–Ω–Ω—è, –∞–±–æ wild
    color_card, value_card, color_card_dark, value_card_dark = card
    color_top, value_top, color_top_dark, value_top_dark = top_card

    if side == "light":
        if color_card == "wild":
            return True
        if color_card == color_top:
            return True
        if value_card == value_top:
            return True
    else:
        if color_card_dark == "wild":
            return True
        if color_card_dark == color_top_dark:
            return True
        if value_card_dark == value_top_dark:
            return True
    return False

def process_play(update: Update, context: CallbackContext, player_id, card_index):
    global hands, discard_pile, current_turn, players, flip_side, deck, game_started

    if player_id != players[current_turn].id:
        context.bot.send_message(chat_id=player_id, text="–ó–∞—Ä–∞–∑ –Ω–µ —Ç–≤—ñ–π —Ö—ñ–¥!")
        return

    hand = hands[player_id]
    if card_index >= len(hand):
        context.bot.send_message(chat_id=player_id, text="–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä –∫–∞—Ä—Ç–∏!")
        return

    card = hand[card_index]
    top_card = discard_pile[-1]

    if not valid_play(card, top_card, flip_side):
        context.bot.send_message(chat_id=player_id, text="–¶—é –∫–∞—Ä—Ç—É —Å–∫–∏–Ω—É—Ç–∏ –Ω–µ –º–æ–∂–Ω–∞!")
        prompt_player_turn(context)
        return

    # –°–∫–∏–¥–∞—î–º–æ –∫–∞—Ä—Ç—É
    discard_pile.append(card)
    hand.pop(card_index)

    # –Ø–∫—â–æ –∫–∞—Ä—Ç–∞ Flip ‚Äî –∑–º—ñ–Ω—é—î–º–æ —Å—Ç–æ—Ä–æ–Ω—É
    if (flip_side == "light" and card[1] == "Flip") or (flip_side == "dark" and card[3] == "Flip"):
        flip_side = "dark" if flip_side == "light" else "light"
        context.bot.send_message(
            chat_id=player_id,
            text=f"Flip! –¢–µ–ø–µ—Ä –≥—Ä–∞—î–º–æ –Ω–∞ {flip_side} —Å—Ç–æ—Ä–æ–Ω—ñ."
        )

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É
    if len(hand) == 0:
        for p in players:
            context.bot.send_message(
                chat_id=p.id, text=f"–ì—Ä–∞–≤–µ—Ü—å {players[current_turn].first_name} –≤–∏–≥—Ä–∞–≤ –≥—Ä—É! üéâ"
            )
        game_started = False
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
    next_turn()
    # –ó–∞–ø–∏—Ç—É—î–º–æ —Ö—ñ–¥ —É –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è
    prompt_player_turn(context)

def process_draw(update: Update, context: CallbackContext, player_id):
    global deck, hands, current_turn, players

    if player_id != players[current_turn].id:
        context.bot.send_message(chat_id=player_id, text="–ó–∞—Ä–∞–∑ –Ω–µ —Ç–≤—ñ–π —Ö—ñ–¥!")
        return

    if len(deck) == 0:
        # –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ —Å–∫–∏–Ω—É—Ç—ñ –∫–∞—Ä—Ç–∏, –æ–∫—Ä—ñ–º –≤–µ—Ä—Ö–Ω—å–æ—ó
        top = discard_pile.pop()
        deck.extend(discard_pile)
        random.shuffle(deck)
        discard_pile.clear()
        discard_pile.append(top)

    card = deck.pop()
    hands[player_id].append(card)
    context.bot.send_message(
        chat_id=player_id,
        text=f"–¢–∏ –¥–æ–±—Ä–∞–≤ –∫–∞—Ä—Ç—É: {format_card(card, flip_side)}"
    )
    # –ü—ñ—Å–ª—è –¥–æ–±–æ—Ä—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
    next_turn()
    prompt_player_turn(context)

def process_say_uno(update: Update, context: CallbackContext, player_id):
    if player_id != players[current_turn].id:
        context.bot.send_message(chat_id=player_id, text="–ó–∞—Ä–∞–∑ –Ω–µ —Ç–≤—ñ–π —Ö—ñ–¥!")
        return
    context.bot.send_message(chat_id=player_id, text="–¢–∏ —Å–∫–∞–∑–∞–≤ UNO! –ì–æ—Ç—É–π—Å—è –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –≥—Ä–∏!")

def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data

    if not game_started:
        query.answer("–ì—Ä–∞ —â–µ –Ω–µ –ø–æ—á–∞–ª–∞—Å—å.")
        return

    if data.startswith("play_"):
        card_index = int(data.split("_")[1])
        process_play(update, context, user_id, card_index)
        query.answer()
    elif data == "draw_card":
        process_draw(update, context, user_id)
        query.answer()
    elif data == "say_uno":
        process_say_uno(update, context, user_id)
        query.answer()
    elif data == "flip_side":
        global flip_side
        flip_side = "dark" if flip_side == "light" else "light"
        query.message.reply_text(f"Flip! –¢–µ–ø–µ—Ä –≥—Ä–∞—î–º–æ –Ω–∞ {flip_side} —Å—Ç–æ—Ä–æ–Ω—ñ.")
        query.answer()
        prompt_player_turn(context)
    else:
        query.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.")

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("join", join))
    dp.add_handler(CallbackQueryHandler(button_handler))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
